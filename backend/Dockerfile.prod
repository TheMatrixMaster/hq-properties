ARG BASE_IMAGE=clux/muslrust:nightly

# Generate dependencies recipe file
FROM ${BASE_IMAGE} AS api-planner
RUN cargo install cargo-chef
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# Build cache
FROM ${BASE_IMAGE} AS api-cacher
RUN cargo install cargo-chef
COPY --from=api-planner /volume/recipe.json recipe.json
RUN cargo chef cook \
    --release \
    --all-features \
    --target x86_64-unknown-linux-musl \
    --recipe-path recipe.json

# Our first FROM statement declares the build environment.
FROM ${BASE_IMAGE} AS api-builder

# Add our source code
WORKDIR /home/api
COPY . .
COPY --from=api-cacher /volume/target target
COPY --from=api-cacher /root/.cargo /root/.cargo

# Build our application.
ARG BINARY
ENV SERVER=${BINARY}
RUN cargo build \
    --release \
    --target x86_64-unknown-linux-musl \
    --features build-${BINARY} \
    --bin ${BINARY}

# Strip binary for size optimization
RUN strip target/x86_64-unknown-linux-musl/release/${BINARY}

# Now, we need to build our _real_ Docker container, copying in `${BINARY}` binary.
FROM alpine:latest

RUN apk update
RUN apk add bash
RUN apk --no-cache add unzip
RUN apk --no-cache add ca-certificates

ARG BINARY
ENV SERVER=${BINARY}

WORKDIR /home/api

COPY --from=api-builder /home/api/static/ /home/api/static/
COPY --from=api-builder /home/api/Rocket.toml /home/api/
COPY --from=api-builder /home/api/entrypoint.sh /home/api/

COPY --from=api-builder \
    /home/api/target/x86_64-unknown-linux-musl/release/${BINARY} \
    /home/api/target/release/${BINARY}

RUN chmod +x /home/api/entrypoint.sh
ENTRYPOINT ["/home/api/entrypoint.sh"]
CMD []
