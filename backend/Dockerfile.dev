FROM rustlang/rust:nightly AS builder

# Setup working environment
RUN apt-get update -y
RUN apt-get install pkg-config libssl-dev
RUN apt-get install musl-tools musl-dev -y

RUN apt-get install build-essential -y
RUN apt-get install gcc-x86-64-linux-gnu -y

# RUN apk update
# RUN apk add pkgconfig openssl-dev musl-dev

ENV RUSTFLAGS='-C linker=x86_64-linux-gnu-gcc'
# ENV CC='gcc'
# ENV CC_x86_64_unknown_linux_musl=gcc-x86-64-linux-gnu
# ENV CC_x86_64-unknown-linux-musl=gcc-x86-64-linux-gnu

WORKDIR /home/api

# Compile on dummy source code for better caching
COPY Cargo.toml Cargo.lock ./
RUN mkdir src
RUN echo "fn main() {}" > src/main.rs

# Install diesel-cli for database migrations
# RUN cargo install diesel_cli --no-default-features --features postgres

## Install target platform (Cross-Compilation) --> Needed for Alpine
RUN rustup target add x86_64-unknown-linux-musl

# Build the dependencies
RUN cargo build --release --target x86_64-unknown-linux-musl

# Add our source code
ADD --chown=rust:rust . ./
RUN touch src/main.rs

ARG BINARY
ENV SERVER=${BINARY}
RUN rm ./target/x86_64-unknown-linux-musl/release/deps/backend_api*

# Build the release binary
RUN cargo build --release --target x86_64-unknown-linux-musl --bin ${BINARY}

# Strip binary for size optimization
RUN strip target/x86_64-unknown-linux-musl/release/${BINARY}

FROM alpine:latest

RUN apk update
RUN apk add bash
RUN apk --no-cache add ca-certificates

ARG BINARY
ENV SERVER=${BINARY}

WORKDIR /home/api

COPY --from=builder /home/api/secrets/ /home/api/secrets/
COPY --from=builder /home/api/entrypoint.sh /home/api/

COPY --from=builder \
    /home/api/target/x86_64-unknown-linux-musl/release/${BINARY} \
    /home/api/target/release/${BINARY}

RUN chmod +x /home/api/entrypoint.sh
ENTRYPOINT ["/home/api/entrypoint.sh"]
CMD []
